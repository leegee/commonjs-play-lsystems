/*

#define W	.5
#define AS 	 2
#define BS 	 1
#define R 	 1
#define L	-1


 w : !(W)F(BS,R)
p1 : F(s,o) : s == AS && o == R -> F(AS,L)F(BS,R)
p2 : F(s,o) : s == AS && o == L -> F(BS,L)F(AS,R)
p3 : F(s,o) : s == BS	        -> F(AS,o)


!(.5)F(1,1)
!(.5)F(2,1)
!(.5)F(2,-1)F(1,1)
!(.5)F(1,-1)F(2,1)F(2,1)

*/

"use strict";

const RAD = Math.PI / 180.0;
var _invocations = 0;

var LOGGER = log4javascript.getDefaultLogger();
var appender = new log4javascript.BrowserConsoleAppender();
// var popUpLayout = new log4javascript.PatternLayout("%d{HH:mm:ss} %-5p - %m%n");
// appender.setLayout(popUpLayout);
appender.setThreshold(log4javascript.Level.TRACE);
LOGGER.addAppender(appender);			

if (!console){
	console = {};
	console.log = function(){};	
	console.debug = function(){};	
	console.info = function(){};	
}

var Lsys = new Class({
	Implements: [Options],

	xoffset: 	0,
	yoffset: 	0,
	generation:	0,
	total_generations: 0,
	variables:	null,
	interpolateVarsRe: null,
	
	options: { 
		el: null, // destination element
		start		: 'F',
		variables	: '',
		rules		: null,
		merge_duplicates : 1,
		duration 		: 48,
		scale 			: 'pentatonic',
		initial_note_decimal : 58,
		canvas_width		: 2000,
		canvas_height	: 800,
		angle			: 30,
		turtle_step_x	: 10,
		turtle_step_y	: 10,
		init_x			: null,
		init_y			: null,
		line_width		: 1,
		generations_scale_lines: true,
		colours			: [
//			"rgba(244, 0, 0, 0.75)",
//			"rgba(0, 244, 0, 0.75)",
//			"rgba(0, 0, 244, 0.75)",

			"rgba(130, 90, 70, 0.8)",
			"rgba(33, 180, 24, 0.6)", 
			"rgba(50, 210, 50, 0.5)", 
			"rgba(70, 255, 70, 0.4)"
		]
	},
    
	initialize: function( options ){
        Object.keys(options).each( function(i){
        		// Cast string to number
        		if (typeof options[i] === 'string' && options[i].match(/^\s*[.\d+]+\s*$/)) {
				options[i] = parseInt( options[i] );
        		}
        });
        
        this.setOptions(options);
        this.castRules();
        this.castVariables();

		this.interpolateVarsRe = new RegExp( /(\$\w+)/g );

		console.log('Variables: ');
		console.log( this.variables );
		console.log('Rules: ');
		console.log( this.options.rules );

		this.invocations = ++_invocations;
		this.canvas		= new Element('canvas', {
			id: 		'canvas'+this.invocations,
			width: 	this.options.canvas_width,
			height:	this.options.canvas_height
		}).inject( this.options.el, 'top' );
		this.colour		= this.options.colours[0];
		this.content		= '';
		this.x 			= this.options.init_x || 0;
		this.y 			= this.options.init_y || this.options.canvas_height/2;
		this.max_x 		= 0;
		this.max_y 		= 0;
		this.min_x 		= 0;
		this.min_y 		= 0;
		this.ctx			= this.canvas.getContext("2d");
	},
	
	castVariables: function( str ){
		str = str || this.options.variables;
		var rv = {};	
		str.split(/[\n\r\f]+/).each( function(line){
			// Detect 
			var name2val = line.match(/^\s*(#define)?\s*(\$\w+)\s*(\S+)\s*$/);
			// Store
			rv[name2val[2]] = name2val[3];
			// Cast
			if (rv[name2val[2]].match(/^(-+)?\d+(\.\d+)?$/))
				rv[name2val[2]] = parseFloat( rv[name2val[2]] );	
		});
		this.variables = rv;
		return rv;
	},
	
	/* Creates a strucure as follows:
	[ [to_match, condition, substitution ], ...]
	*/
	castRules: function( str ){
		str = str || this.options.rules;
		var rv = [];
		// F(s,o) : s == AS && o == R -> F(AS,L)F(BS,R) \n

		str.split(/[\n\r\f]+/).each( function(line){
			if (line=='') return;
			var head_tail = line.match(
				/^\s*(.+?)\s*->\s*([^\n\r\f]+)\s*/
			);
			var match_condition = head_tail[1].match(
				/([^:]+)\s*:?\s*(.*?)\s*$/	
			);
			var head = match_condition[1].match(/^(.+?)\s*$/);
			var rule = [
				head[1],
				match_condition[2],
				head_tail[2]
			];
			rv.push( rule );
		});
		
		this.options.rules = rv;
		return rv;
	},

	dsin: function(radians){ return Math.sin(radians * RAD) },
	dcos: function(radians){ return Math.cos(radians * RAD) },
	
	generate: function( generations ) {
		console.debug( 'Enter generate for '+generations+' generations');
		this.total_generations = generations;
		this.generation = 0;
		
		if (this.content.length == 0)
			this.content = this.options.start;

		for (this.generation=1; this.generation <= generations; this.generation++){
			this.apply_rules();
		}
		
		this.render();
		this.resize();
		this.finalise();
		console.debug( 'Leave generate -------------------------');
	},

	interploateVars: function( str ){
		var self = this;
		var rv = str.replace( 
			this.interpolateVarsRe,
			function(match){
				return (typeof self.variables[ match ] != 'undefined')?
					self.variables[ match ]
				:	match;
			}
		);
		return rv;
	},
	
	string2reAndArgNames: function( str ){
		var self = this;
		var argNames = [];
		this.str2reRe = new RegExp( /(\w+)\(([^\)]+)\)/	 );
		var rv = str.replace( 
			this.str2reRe,
			function(match, varname, argsCsv){
				argNames = argsCsv.split(/\s*,\s*/);
				// Could cache these based on args.length:
				return '('+varname +')\\('+ argNames.map(function(){
					return '([\\$\\w+]+)'
				}) +'\\)';
			}
		);
		return [
			new RegExp(rv, 'g'),
			argNames
		];
	},
	
	apply_rules: function() {
		var self = this;
		console.info( 'Enter apply_rules for generation '+this.generation );
		var _new = [];
		var bailOut = false;
		
		self.options.rules.each( function( rule ){
			if (bailOut){
				console.log( 'Skip rule for '+self.generation);
				return;
			}
			
			console.log( 'Test for rule '+rule.join(' ')  + ' in content '+self.content	 );

			// Re-write the rule to replace variables with literals, where possible:
			var _		  		= self.string2reAndArgNames( rule[0] );
			var rule2findRe 		= _[0];
			var ruleArgNames		= _[1];

			console.log('Rule says find '+rule[0]+' in content of '+self.content);
			var literal_content = self.interploateVars( self.content );
			console.log('Rule says find '+rule2findRe+' in content of '+literal_content);

			// Find the rule pattern (left-hand side of condition)
			// and replace if condition is met
			var madesubstitution = false;
			var content_post_rule = literal_content.replace(
				rule2findRe,
				function( original ){
					if (madesubstitution) return;

					var literalArgs = [];
					for (var i=2; i < arguments.length-2; i++){
						console.log( "Let "+ruleArgNames[i-2] +' = '+ arguments[i] );
						// Set variables with values found
						self.variables[ ruleArgNames[i-2] ] = arguments[i];
						literalArgs.push( arguments[i] );
					}
					
					// Should the substitution take place?
					var ruleConditionJs	= self.interploateVars( rule[1] );
					console.log('Condition: '+ruleConditionJs );
					
					var ruleConditionMet = eval(ruleConditionJs);
					
					if (! ruleConditionMet){
						console.log( 'Condition not met');
						return original;
					}
					
					madesubstitution = true;
					var substituted	= self.interploateVars( rule[2] );
					console.log('--------Condition met------: substituted result = '+substituted);
					return substituted;
				} // end of replacement function
			); // end of replacement call
			
			if (self.content != content_post_rule){
				self.content = content_post_rule;
				bailOut = true;
				console.log('Rule fulfilled - bail out of rules for generation '+self.generation);
				return;
			}
			
		}); // Next rule
		
		console.log('After the rule was applied: '+ self.content );
		console.log(
			'# FINAL for generation '+this.generation+'/'+this.total_generations+' ############################ Content: '+self.content
		);
	},
	
	render: function(){
		var self = this;
		var dir = 0;
		var states  = [];

		// PRODUCTION_RULES:
		for (var i=0; i < this.content.length; i++){
			var draw = true;
			// console.debug( 'Do '+i);
			switch (this.content.charAt(i).toLowerCase()){
				case 'c':
					self.setColour( parseInt( this.content.charAt( ++i ) ));
					break;
				case '+':
					dir += self.options.angle;
					break;
				case '-':
					dir -= self.options.angle;
					break;
				case '[':
					states.push([dir, self.x, self.y, self.colour]);
					draw = false;
					break;
				case ']':
					var state = states.pop();
					dir = state[0];
					self.x = state[1];
					self.y = state[2];
					self.colour = state[3];
					draw = true;
					break;
			};

			if (draw)
				self.turtle_graph( dir );
		}
		console.info('Leave default_generate_callback');
	},
	
	finalise: function(){
		console.debug( 'Finalised');
	},
		
	turtle_graph: function(dir){
		// console.debug( 'Move '+dir +' from '+this.x+','+this.y );
		
		this.ctx.beginPath();
		/*
		if (this.options.generations_scale_lines){
			this.ctx.lineWidth = this.options.generations	
		}
		else 
		*/
		if (this.options.line_width){
			this.ctx.lineWidth = this.options.line_width
		}
		this.ctx.moveTo( this.x, this.y ); 

		this.x += ( this.dcos(dir) * ( this.options.turtle_step_x ));
		this.y += ( this.dsin(dir) * ( this.options.turtle_step_y ));

		this.x += this.xoffset;
		this.y += this.yoffset;
		
		if (this.x > this.max_x) this.max_x = this.x;
		if (this.y > this.max_y) this.max_y = this.y;
		if (this.x < this.min_x) this.min_x = this.x;
		if (this.y < this.min_y) this.min_y = this.y;
		this.ctx.lineTo( this.x, this.y );
		this.ctx.closePath(); 
		this.ctx.stroke(); 
		// console.debug( '...to '+this.x+','+this.y );
	},
	
	setColour: function( index ){
		this.colour = this.options.colours[ index ];
		this.ctx.strokeStyle =  this.colour;
	},
	
	resize: function(){
		console.log(this.min_x +'->'+ this.max_x);
		console.log(this.min_y +'->'+ this.max_y);
		var wi = Math.abs( this.min_x ) 
			+ Math.abs( this.max_x );
		var hi = Math.abs( this.min_y ) 
			+ Math.abs( this.max_y );
		console.log( this.canvas.width +','+ this.canvas.height);
		console.log( wi+','+hi );
		var sx = this.canvas.width / wi;
		var sy = this.canvas.height / hi;
		console.log('Scale: '+ sx+','+sy );
		this.canvas.width = this.canvas.width;
		
		this.ctx.scale( sx, sy );
		
		this.x 			= this.options.init_x || 0;
		this.y 			= this.options.init_y || this.options.canvas_height/2;
		this.y -=  this.min_y;

		console.log( this.y);
		this.render();
	}
});



